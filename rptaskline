#!/bin/bash
#
# rptaskline
#   - set up taskw/timew environment variables
#   - run a given command with stifled stdio
#   - optionally feed a ratpoison-prompted string to the command
#   - report failure if nonzero exit
#   - runs a given after-command, output to invoker (ratpoison) for display
#
# args:
#   if no args, runs 'taskline' only, with no '$1:' prefixed
#   if one arg, runs $1, $2 set to 'taskline'
#   if two args, runs $1, $2 set to second arg
#   if first arg is -p or --prompt, reads user input, pass to $1
#
# output:
#   if success, ratpoison echo "$1: `$2`"
#   if failure, ratpoison echo "$1: failed: `$2`"
#   command -> [if different: before-fql -> after-fql] \
#              [if different: before-status -> after status]
#   taskcont -> noop
#
# scott@smemsh.net
# https://github.com/smemsh/utilx/
# https://spdx.org/license/GPL-2.0
#
##############################################################################

# TODO: timeout

source ~/.taskenv 2>/dev/null

#
read fql_before stc_before __ <<< "$(taskline)"

if [[ $1 == '-p' || $1 == '--prompt' ]]
then prompt=1; shift; fi

taskcmd=$1
taskafter=${2:-taskline}

if (($# == 0))
then rp echo "$(taskline)"; exit; fi

if ((prompt))
then input=$(rp prompt "$taskcmd: "); fi

if ! $taskcmd $input
then taskcmd="$taskcmd: failed"; fi

#
taskline="$(taskline)"
read fql_after stc_after __ <<< "$taskline"

[[ $fql_before != $fql_after ]]; fql_changed=$((!($?)))
[[ $stc_before != $stc_after ]]; stc_changed=$((!($?)))
any_changed=$((fql_changed | stc_changed))

# cmd: [oldfql] [oldstat] [->] taskline
outline=($taskcmd:)
((fql_changed)) && outline+=($fql_before)
((stc_changed)) && outline+=("$stc_before")
((any_changed)) && outline+=('->')

# re-use taskline if requested since we already have it from $after[]
if [[ $taskafter == taskline ]]
then outline+=("$taskline")
else outline+=("$(taskafter)")
fi

rp echo "${outline[*]}"
